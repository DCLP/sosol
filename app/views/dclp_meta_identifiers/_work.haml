.workContainer
  .clear
  .multi.work{:id => 'multi_work'}
    %ul.items{:id => 'multiItems_work'}
      - @identifier[:work].each_with_index do |work, workIndex|
        = workIndex
        = work
        - work = DclpWork::Work.new(work)
        - base = 'hgv_meta_identifier[work][' + workIndex.to_s + ']'
        - baseAttributes = base + '[attributes]'
        - baseChildren = base + '[children]'

        %li.work{:id => 'work_' + workIndex.to_s }
          = select_tag baseAttributes + '[subtype]', options_for_select(DclpWork.subtypeOptions, work.subtype), :disabled => !@identifier.mutable?, :class => 'observechange workSubtype'
          .clear
          
          %h5
            Author
          = label_tag baseChildren + '[author][name]', I18n.t('dclp.label.workAuthorName'), :class => 'meta workAuthorName', :title => @identifier.configuration.xpath(:work)
          = text_field_tag baseChildren + '[author][name]', work.author.name, :disabled => !@identifier.mutable?, :class => 'observechange workAuthorName', :onchange => "workAuthorNameChange(this);"
          
          = label_tag baseChildren + '[author][number]', I18n.t('dclp.label.workAuthorNumber'), :class => 'meta workAuthorNumber', :title => @identifier.configuration.xpath(:work)
          = text_field_tag baseChildren + '[author][number]', work.author.tlg, :disabled => !@identifier.mutable?, :class => 'observechange workAuthorNumber', :onchange => "workAuthorNumberChange(this);"
          
          = label_tag baseChildren + '[author][certainty]', I18n.t('dclp.label.workCertainty'), :class => 'meta workAuthorCertainty', :title => @identifier.configuration.xpath(:work)
          = text_field_tag baseChildren + '[author][certainty]', work.author.certainty, :disabled => !@identifier.mutable?, :class => 'observechange workAuthorCertainty'
          .clear
          
          %h5
            Work
          = work.title
          .clear
          
          %h5
            Passage
          = work.extraList

          .extraContainer
            =render :partial => 'dclp_meta_identifiers/editionExtra', :locals => {:extraList => work.extraList, :baseChildren => baseChildren, :workIndex => workIndex}
            .clear

          %span.delete{:onclick => 'multiRemove(this.parentNode)', :title => I18n.t('tooltip.multiDelete')} x
          %span.move{:title => I18n.t('tooltip.multiMove')} o

    = javascript_tag "Sortable.create('multiItems_work', {overlap: 'horizontal', constraint: false, handle: 'move'});"
   
  .clear
