:javascript
  //this funcion has to be in the haml file because of the ruby stuff in it needs to be handled on view load
  function getMarkUp(originalxml)
  {

    //remove  namespaces that break sugar
    var xmlnsPattern = new RegExp(' xmlns[^\"]*\"[^\"]*\"', 'gi');
    originalxml = originalxml.replace(xmlnsPattern, '');

    //create url call
    if (#{(!defined?(XSUGAR_STANDALONE_USE_PROXY).nil?) && XSUGAR_STANDALONE_USE_PROXY}) {
      request_url = "#{url_for(:controller => 'ajax_proxy', :only_path => true)}" + '/xsugar/';
    }
    else {
      request_url = "#{defined?(XSUGAR_STANDALONE_URL) ? XSUGAR_STANDALONE_URL : ''}";
      request_url = "/" + request_url.split("/").slice(3).join("/");
    }

    wrapped_content = "<wrap>" + originalxml + "</wrap>";
    
    new Ajax.Request(request_url, {
      method: 'post',
      parameters: $H({content: wrapped_content, type: 'commentary', direction: 'xml2nonxml'}),
      onSuccess: function(response) {

        json = response.responseText.evalJSON();

        if ("exception" in json){
          alert("Grammar conversion error line " + json.exception.line + " column " + json.exception.column + " of this XML \n" + json.content);
        }
        else {
          leidenh = json.content.replace(/^\<W\:/,'').replace(/\:W\>$/,'').strip();
          window.close();
          
          insertMarkUp(leidenh);
        }
      },
      onFailure: function(response) {
        // reload after 10 seconds if we failed, should ONLY be used if JCS cache is working
        setTimeout("getMarkUp(" + originalxml + ")",10000);
      }
    });
  }

#main
  = csrf_meta_tag
  = javascript_include_tag :defaults
  = javascript_include_tag 'commentary'

  .site
    = stylesheet_link_tag 'helper'
    #gapsize{:class => "helperpop"}
      = render :partial => 'commentary_markup_warn'
      %br
      %h3 Create Foot Note
      %br
      %h7 Free Form Text
      %br
      %br
      #extent_left
        %input{ :type => "text", :class => "greek", :id => "insertfootnote_text", :lang => 'grc', 'xml:lang' => 'grc', :size => "80"}
        -# TODO remove line below if text box is enough 
        -# = text_area_tag 'insertfootnote_text', nil, :lang => 'grc', 'xml:lang' => 'grc', :cols => 78, :rows => 2, :class => 'greek'
      %br
      %br
      #button_left
        %button{ :type => "button", :onclick=> "insertFootnote()" }Insert
        &nbsp
        %button{:type => "button", :onclick => "closeHelper()"}Close
