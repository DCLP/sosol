:javascript

  function showExtraIds(ref_number, icon_node)
  {
    var node_name = "extra_ids_" + ref_number;
    //alert(node_name);
    //$(node_name).style.top = "0px";
    //$(node_name).style.left = "0px";
    $(node_name).style.zIndex = "99";
    //$(node_name).show;
    
    
    //.visibility = "hidden"
    var img_node = $(icon_node).select('img');
    
    if ( $(node_name).style.visibility == "hidden" )
    {
      $(node_name).style.visibility = "visible"
      img_node[0].src = '../images/hide_more_ids.png';
    }
    else
    {
      $(node_name).style.visibility = "hidden"
      img_node[0].src = '../images/show_more_ids.png';
    }
  }
  
  
  function showOffsets(node)
  {
    var dnode = $(node).parentNode.parentNode;
    var offset_nodes = dnode.select('div[class~=offset]');
    for (var i=0; i< offset_nodes.length; i++)
    {
      if (offset_nodes[i].style.display == 'none')
      {
        offset_nodes[i].style.display = 'block';
        offset_nodes[i].style.zIndex = "5";
      }
      else
      {
        offset_nodes[i].style.display = 'none';
      }
    }

  }
  
  function sortByNeedsReview()
  {
    //remove needs review divs
    var list_node = $('board_publication_list_holder');
    var review_nodes = list_node.select('div[class~=needs_review]');
    var new_list = new Array();
    for (var i=0; i < review_nodes.length; i++)
    {
      review_nodes[i].parentNode.parentNode.remove;
      new_list.push(review_nodes[i].parentNode.parentNode);
      new_list[i].remove;
    }
        
    //for (var i=0;i<new_list.length; i++)
    {
    //  list_node.insert( {'top': new_list[i] } );
    }
    
    for (var i= new_list.length - 1; i >=0;i--)
    {
      list_node.insert( {'top': new_list[i] } );
    }

  }
  

  function sortByIdentifier(identifier_name)
  {
    
    var list_node = $('user_publication_list_holder');
    //var select_statement = 'div[class~=identifier_holder ' + identifier_name + ']';
    var select_statement = 'div[class~=identifier_holder ' + identifier_name + '] div[class~=identifier]';
    
    var identifier_nodes = list_node.select(select_statement);
    
    //just pull them out of the list, then reinsert them at the top
    var new_list = new Array();
    for (var i=0; i < identifier_nodes.length; i++)
    {
      new_list.push(identifier_nodes[i].parentNode.parentNode);
      new_list[i].remove;
    }
        
    //could sort here
    
        
    for (var i= new_list.length - 1; i >=0;i--)
    {
      list_node.insert( {'top': new_list[i] } );
    }

  }
  
  var title_direction = 1;
  function sortByTitle()
  {
    
    var list_node = $('user_publication_list_holder');
    
    var select_statement = 'div[class~=publication]';
    
    var publication_nodes = list_node.select(select_statement);
    
    var new_list = new Array();
    for (var i=0; i < publication_nodes.length; i++)
    {
      new_list.push(publication_nodes[i].parentNode);
      new_list[i].remove;
    }
        
    if (title_direction % 2)    
      new_list.sort(titleSort);   
    else
      new_list.sort(titleSortReverse);
      
    title_direction = title_direction + 1;
       
    for (var i= new_list.length - 1; i >=0;i--)
    {
      list_node.insert( {'top': new_list[i] } );
    }

  }
  
  function titleSortReverse(a,b)
  {
    return -1 * titleSort(a,b);
  }
  
  function titleSort(a,b)
  {
    var atitle = a.select('div[class~=publication]')[0].firstChild.nodeValue;
    var btitle = b.select('div[class~=publication]')[0].firstChild.nodeValue;
    //alert (atitle + " " + btitle);
    return ((atitle < btitle) ? -1 : ((atitle > btitle) ? 1 : 0));
  }
  
  
  function hideExtraIds()
  {
    var extra_nodes = $$('div[class~=extra_ids]');
    for (var i=0; i< extra_nodes.length; i++)
    {
     
        extra_nodes[i].style.visibility = 'hidden';
     
    }
  
  }
  

  window.onload = function local_load()
  {
    hideExtraIds();  
  }
  

= stylesheet_link_tag "publication_list"

- extra_id_count = 1

%div{:class => "user_publications_header_holder" }

  %div{:class => "user_publications_header_title" + " sort_header", :onclick => "sortByTitle()" }
    Title
  %div{:class => "user_publications_header_overview"}
    Overview
  - possible_identifiers = Array.new(Identifier::IDENTIFIER_SUBCLASSES)
  - if possible_identifiers.length > 0
  
    - possible_identifiers.each do |pi|
      %div{:class => "user_publications_header_" + pi }
        
        
        %div{:onclick => "sortByStatus('#{pi}', 'editing')", :class => "status_sort_button"}
          = image_tag('status_editing.png')
        %div{:onclick => "sortByStatus('#{pi}', 'submitted')", :class => "status_sort_button"}
          = image_tag('status_submitted.png')        
        %div{:onclick => "sortByStatus('#{pi}', 'approved')", :class => "status_sort_button"}
          = image_tag('status_approved.png')        
        %div{:onclick => "sortByStatus('#{pi}', 'finalized')", :class => "status_sort_button"}
          = image_tag('status_committed.png')        
    
%div{:class => "publication_list_holder", :id => "user_publication_list_holder" }

  - publications.each do |publication|
    - if publication.status != 'archived'
      %div{:class => "publication_holder ", :id => "publication_holder_" + publication.id.to_s }
        
        %div{:class => "publication_title " + "status_" + publication.status, :id =>  "publication_" + publication.id.to_s}
          = publication.title
        
        %div{:class => "overview_holder"}
          = link_to( image_tag('documents.png', :border => "0", :alt => "Publication Overview") , publication)
          
        - id_set = Set.new(publication.identifiers)
        - id_hash = id_set.classify { |id| id.class.name }
        
        - identifiers_to_show = Array.new(Identifier::IDENTIFIER_SUBCLASSES)
        - id_hash.each_pair do |k,v|
          - identifiers_to_show.delete(k)              
          
          %div{:class => "identifier_holder " + k}
          
            -# find status..for multiples id do what?
            
            - if v.count == 1
              -# ouput the only thing
              %div{:class => "identifier"}
                
                - if v.first.modified
                  %div{:class => "identifier_holder_status_" + v.first.status }
                    = image_tag('status_icons.png')
                - else
                  %div{:class => "identifier_holder_status_not_modified" }
                    = image_tag('status_icons.png')
                %div{:class=> "identifier_title"}                  
                  = link_to v.first.title.strip, edit_polymorphic_path([publication, v.first])
          
            
            - elsif v.count > 1
              - extra_id_count = extra_id_count + 1;
              
              
              -v.each do |possible_modified|
                - if possible_modified.modified
                  %div{:class => "identifier_holder_status_" + possible_modified.status }
                    = image_tag('status_icons.png')
                  %div{:class=> "identifier_title"}                  
                    = link_to possible_modified.title.strip, edit_polymorphic_path([publication,possible_modified])
                  - break
              
              %div{:class => "show_more_ids", :onclick => "showExtraIds( '#{extra_id_count}', this)" }
                = image_tag('show_more_ids.png')
              
         
              -# make popup for all the ids
              %div{:class => "extra_ids", :id => "extra_ids_" + extra_id_count.to_s}
              
                
                - v.each do |extra_id|
                  %div{:class => "identifier"}
                    
                    - if extra_id.modified
                      %div{:class => "identifier_holder_status_" + extra_id.status }
                        = image_tag('status_icons.png')
                    - else
                      %div{:class => "identifier_holder_status_not_modified" }
                        = image_tag('status_icons.png')
                    %div{:class=> "identifier_title"}                  
                      = link_to extra_id.title.strip, edit_polymorphic_path([publication, extra_id])
              
    
                
                
        - identifiers_to_show.each do |is|
          %div{:class => "identifier_holder " + is + " no_data "}
        
