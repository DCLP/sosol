:javascript

  function showExtraIds(ref_number, icon_node)
  {
    var node_name = "extra_ids_" + ref_number;
    //alert(node_name);
    //$(node_name).style.top = "0px";
    //$(node_name).style.left = "0px";
    $(node_name).style.zIndex = "99";
    //$(node_name).show;
    
    
    //.visibility = "hidden"
    var img_node = $(icon_node).select('img');
    
    if ( $(node_name).style.visibility == "hidden" )
    {
      $(node_name).style.visibility = "visible"
      img_node[0].src = '../images/hide_more_ids.png';
    }
    else
    {
      $(node_name).style.visibility = "hidden"
      img_node[0].src = '../images/show_more_ids.png';
    }
  }
  
  
  function sortByNeedsReview()
  {
    //remove needs review divs
    var list_node = $('board_publication_list_holder');
    var review_nodes = list_node.select('div[class~=needs_review]');
    var new_list = new Array();
    for (var i=0; i < review_nodes.length; i++)
    {
      review_nodes[i].parentNode.parentNode.remove;
      new_list.push(review_nodes[i].parentNode.parentNode);
      new_list[i].remove;
    }
        
    //for (var i=0;i<new_list.length; i++)
    {
    //  list_node.insert( {'top': new_list[i] } );
    }
    
    for (var i= new_list.length - 1; i >=0;i--)
    {
      list_node.insert( {'top': new_list[i] } );
    }

  }
  
  var board_sort_id = 0;
  function sortByBoard(board_name)
  {
    //---get all the existing board names
    var list_node = $('board_publication_list_holder');
    //var select_statement = 'div[class~=publication_holder ' + board_name + ']';
    //var board_nodes = list_node.select(select_statement);//'div[class~=publication_holder Text]');
    
    var select_statement = 'div[class~=publication_holder] div[class~=publication_board_name]';
    var board_nodes = list_node.select(select_statement);
    
    var board_ids = new Array();
    for (var i=0; i < board_nodes.length; i++)
    {
      var class_name = board_nodes[i].getAttribute("class");
      var board_id = class_name.match(/board_id_[^"' ]*/);

      board_ids.push( board_id[0] );
    }
    
    var id_exists = false;
    var unique_board_ids = new Array();
    //---determine unique board names
    for (var i=0; i< board_ids.length; i++)
    {
      id_exist = false;
      for (id in unique_board_ids)
      {
        if (id == board_ids[i])
        {
          id_exist = true;
        }
      }
      if (!id_exist)
      {
        unique_board_ids.push( board_ids[i] );
      }
   
    }
    
    unique_board_ids.sort();
    board_sort_id++;
    if (board_sort_id >= unique_board_ids.length)
    {
      board_sort_id = 0;
    }
    var resort_array = new Array();
    for (var i=0; i<unique_board_ids.length; i++)
    {
      var index = board_sort_id + unique_board_ids.length;
      if (index >= unique_board_ids.length)
      {
        index = index - unique_board_ids.length;
      }
      resort_array.push( unique_board_ids[index] );
    }
    unique_board_ids = resort_array;
    //pull out each id in some type of order
    //sort unique board ids in numerical order
    //use count to determine the possible sort order
    
    
    //grab board names and put back in list in reverse order
    for (var id_index=0; id_index < unique_board_ids.length; id_index++)
    {
        var board_id = unique_board_ids[id_index];
        select_statement = 'div[class~=publication_holder] div[class~=publication_board_name ' + board_id +']';
        board_nodes = list_node.select(select_statement);

  
        var new_list = new Array();
    
        for (var i=0; i < board_nodes.length; i++)
        {
          new_list.push(board_nodes[i].parentNode);
          new_list[i].remove;
        }
    
        for (var i= new_list.length - 1; i >=0;i--)
        {
          list_node.insert( {'top': new_list[i] } );
        }
    
    }

  }
  



  /////////////////////
  //TODO same as in user publications, should combine
  var title_direction = 1;
  function sortByTitle()
  {
    
    var list_node = $('board_publication_list_holder');
    
    var select_statement = 'div[class~=publication_holder]';
    
    var publication_nodes = list_node.select(select_statement);
    
    var new_list = new Array();
    for (var i=0; i < publication_nodes.length; i++)
    {
      new_list.push(publication_nodes[i]);
      new_list[i].remove;
    }
        
    if (title_direction % 2)    
      new_list.sort(titleSort);   
    else
      new_list.sort(titleSortReverse);
      
    title_direction = title_direction + 1;
       
    for (var i= new_list.length - 1; i >=0;i--)
    {
      list_node.insert( {'top': new_list[i] } );
    }

  }
  
  function titleSortReverse(a,b)
  {
    return -1 * titleSort(a,b);
  }
  
  function titleSort(a,b)
  {
    var atitle = a.select('div[class~=publication_title]')[0].firstChild.nodeValue;
    var btitle = b.select('div[class~=publication_title]')[0].firstChild.nodeValue;
    //alert (atitle + " " + btitle);
    return ((atitle < btitle) ? -1 : ((atitle > btitle) ? 1 : 0));
  }
  /////////


  function sortByStatus(identifier_name, status)
  {
    
    var list_node = $('board_publication_list_holder');

    var select_statement = 'div[class~=identifier_holder ' + identifier_name + '] div[class~=identifier status_' + status + ']';
    
    var identifier_nodes = list_node.select(select_statement);
    
    //alert(status + " found " + identifier_nodes.length);
    //just pull them out of the list, then reinsert them at the top
    var new_list = new Array();
    for (var i=0; i < identifier_nodes.length; i++)
    {
   //identifier_nodes[i].parentNode.remove() ;
      new_list.push(identifier_nodes[i].parentNode.parentNode);
      new_list[i].remove();
    }
        
        
    //could sort here
     
    
    
        
    for (var i= new_list.length - 1; i >=0;i--)
    { 
      list_node.insert( {'top': new_list[i] } );
    }
    
    
    

  }

  
  
  function hideExtraIds()
  {
    var extra_nodes = $$('div[class~=extra_ids]');
    for (var i=0; i< extra_nodes.length; i++)
    {
     
      extra_nodes[i].style.visibility = 'hidden';
     
    }
  
  }
  

  window.onload = function local_load()
  {
    hideExtraIds();  
  }
  
  

= stylesheet_link_tag "publication_list"

- extra_id_count = 0

- if boards.length > 0

   
  %div{:class => "user_publications_header_holder" }
    %div{:class => "board_publications_header_board" + " sort_header", :onclick => "sortByBoard()" }
      Board
    %div{:class => "user_publications_header_title" + " sort_header", :onclick => "sortByTitle()" }
      Title
    %div{:class => "user_publications_header_overview"}
      Overview
    - possible_identifiers = Array.new(Identifier::IDENTIFIER_SUBCLASSES)
    - if possible_identifiers.length > 0
    
      - possible_identifiers.each do |pi|
        %div{:class => "user_publications_header_" + pi }
          
          
          %div{:onclick => "sortByStatus('#{pi}', 'editing')", :class => "status_sort_button"}
            = image_tag('status_editing.png')
          %div{:onclick => "sortByStatus('#{pi}', 'submitted')", :class => "status_sort_button"}
            = image_tag('status_submitted.png')        
          %div{:onclick => "sortByStatus('#{pi}', 'approved')", :class => "status_sort_button"}
            = image_tag('status_approved.png')        
          %div{:onclick => "sortByStatus('#{pi}', 'committed')", :class => "status_sort_button"}
            = image_tag('status_committed.png')        
          = eval pi + "::FRIENDLY_NAME"
      

    
    
    
  

  %div{:class => "publication_list_holder", :id => "board_publication_list_holder" }
    - boards.each do |board| 

      - finalizing_publications =  @board_final_pubs.collect{|p| ((p.parent.owner == board)) ? p : nil}.compact
      - approved_publications = board.publications.collect{|p| p.status == "approved" ? p :nil}.compact
      -#remove approved publications if in the finalizer list
      -# finalizing_publications.each do |fp|
        -#remove it from the list of approved publications
        - approved_publications.each do |ap|
          - if fp.origin == ap.origin
            - approved_publications.delete(ap)
         
      - board_publications = board.publications.clone
      - finalizing_publications.each do |fp|
        - board_publications.each do |bp|
          - if fp.origin == bp.origin
            - board_publications.delete(bp)
        
      - board_and_finalizing_publications = board_publications + finalizing_publications
      
         
      - board_and_finalizing_publications.each do |publication|
        - if publication.status != 'archived' && publication.status != 'committed'
          %div{:class => "publication_holder " + board.friendly_name, :id => "publication_holder_" + board.friendly_name }
            %div{:class => "publication_board_name board_id_" + board.id.to_s }
              = board.friendly_name
            %div{:class => "publication_title " + "status_" + publication.status, :id =>  "publication_" + publication.id.to_s}
              - if publication.status == 'finalizing'
                = link_to publication.title , :controller => "publications", :action => 'finalize_review', :id => publication.id
              - else
                = publication.title
              
            
            %div{:class => "overview_holder"}
              = link_to( image_tag('documents.png', :border => "0", :alt => "Publication Overview") , publication)
            
            
            - id_set = Set.new(publication.identifiers)
            - id_hash = id_set.classify { |id| id.class.name }
            -# id_hash.each do |hash_item|
              = hash_item[0] #classified value (ie name)
              = hash_item[1].count #number of items found
              = hash_item[1].each do |hashed_id|
                = hashed_id.title #why the # sign?
            
           
            - identifiers_to_show = Array.new(Identifier::IDENTIFIER_SUBCLASSES)
            - id_hash.each_pair do |k,v|
              - identifiers_to_show.delete(k)
              
   
   
   
   
   
              %div{:class => "identifier_holder " + k}
              
                -# find status..for multiples id do what?
                
                - if v.count == 1
                  -# ouput the only thing
                  - needs_review = (v.first.needs_reviewing?(@current_user)  ? ' needs_review ' : '')
                  %div{:class => "identifier" + " status_" + v.first.status +  " controlled_" + (board.controls_identifier?(v.first)  ? 'yes' : 'no') + needs_review, :id => "identifier_" + v.first.id.to_s}
                    
                    - if v.first.modified
                      %div{:class => "identifier_holder_status_" + v.first.status }
                        = image_tag('status_icons.png')
                    - else
                      %div{:class => "identifier_holder_status_not_modified" }
                        = image_tag('status_icons.png')
                    
                    - if v.first.votes.count > -1
                      - if v.first.status == "approved"
                        %div{:class => "finalizer" }
                          = "F"
                          - if v.first.find_finalizer_user
                            = v.first.find_finalizer_user.human_name
                            = " is finalizing. "
            
                      - elsif v.first.status == "submitted"     
                        %div{:class => "votes" }
                          = v.first.votes.count
                          = " votes: "
                          - v.first.votes.each do |vote|
                            = vote.choice + " " 
                    %div{:class => "identifier_title"}   
                      = link_to v.first.title.strip, edit_polymorphic_path([publication, v.first])
                        
                
                - elsif v.count > 1
                  - extra_id_count = extra_id_count + 1;
                  
                  
                  -v.each do |possible_modified|
                    - if possible_modified.modified
                      %div{:class => "identifier_holder_status_" + possible_modified.status }
                        = image_tag('status_icons.png')
                      %div{:class=> "identifier_title"}                  
                        = link_to possible_modified.title.strip, edit_polymorphic_path([publication,possible_modified])
                      - break
                  
                  %div{:class => "show_more_ids", :onclick => "showExtraIds( '#{extra_id_count}', this)" }
                    = image_tag('show_more_ids.png')
                  
             
                  -# make popup for all the ids
                  %div{:class => "extra_ids", :id => "extra_ids_" + extra_id_count.to_s}
                  
                    
                    - v.each do |extra_id|
                      %div{:class => "identifier"}
                        
                        - if extra_id.modified
                          %div{:class => "identifier_holder_status_" + extra_id.status }
                            = image_tag('status_icons.png')
                        - else
                          %div{:class => "identifier_holder_status_not_modified" }
                            = image_tag('status_icons.png')
                        %div{:class=> "identifier_title"}                  
                          = link_to extra_id.title.strip, edit_polymorphic_path([publication, extra_id])
                  
        
    
          
            
