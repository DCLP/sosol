:javascript
  function showOffsets(node)
  {
    //sortByNeedsReview();
    //return;
    var dnode = $(node).parentNode.parentNode;
    var offset_nodes = dnode.select('div[class~=offset]');
    for (var i=0; i< offset_nodes.length; i++)
    {
      if (offset_nodes[i].style.display == 'none')
      {
        offset_nodes[i].style.display = 'block';
        offset_nodes[i].style.zIndex = "5";
      }
      else
      {
        offset_nodes[i].style.display = 'none';
      }
    }

  }
  
  function sortByNeedsReview()
  {
    //remove needs review divs
    var list_node = $('board_publication_list_holder');
    var review_nodes = list_node.select('div[class=~needs_review]');
    for (var i=0;i<review_nodes.length; i++)
    {
      list_node.remove(review_nodes[i]);
      alert('removed');
    }
    //add to top
  
  }

= stylesheet_link_tag "publication_list"



- if boards.length > 0
  %div{:class => "publication_list_holder", :id => "board_publication_list_holder" }
    - boards.each do |board| 
      - finalizing_publications =  @board_final_pubs.collect{|p| ((p.parent.owner == board)) ? p : nil}.compact
      - approved_publications = board.publications.collect{|p| p.status == "approved" ? p :nil}.compact
      -#remove approved publications if in the finalizer list
      - finalizing_publications.each do |fp|
        -#remove it from the list of approved publications
        - approved_publications.each do |ap|
          - if fp.origin == ap.origin
            - approved_publications.delete(ap)
         
      - board.publications.each do |publication|
        - if publication.status != 'archived'
          %div{:class => "publication_holder", :id => "publication_holder_" + board.friendly_name }
            %div{:class => "publication " + "status_" + publication.status, :id =>  "publication_" + publication.id.to_s}
              = publication.title
            
            - id_set = Set.new(publication.identifiers)
            - id_hash = id_set.classify { |id| id.class.name }
            -# id_hash.each do |hash_item|
              = hash_item[0] #classified value (ie name)
              = hash_item[1].count #number of items found
              = hash_item[1].each do |hashed_id|
                = hashed_id.title #why the # sign?
            
            - identifiers_to_show = Array.new(Identifier::IDENTIFIER_SUBCLASSES)
            - id_hash.each_pair do |k,v|
              - identifiers_to_show.delete(k)
              
              
              %div{:class => "identifier_holder " + k}
              
                -# find status..for multiples id do what?
                -# if v.length > 0 #if only one, show status
                  %div{:class => "identifier_holder_status_" + v.first.status }

                      
                -# if v.length > 1
                  %div{:class => "expand_identifier_offsets", :onclick => "showOffsets(this)"}
                    expand
                
                - offset_class = ""
                - v.each do |vv| #add count? for offsetting?
                  - needs_review = (vv.needs_reviewing?(@current_user)  ? ' needs_review ' : '')
                  %div{:class => "identifier status_" + vv.status +  " controlled_" + (board.controls_identifier?(vv)  ? 'yes' : 'no') + needs_review + offset_class, :id => "identifier_" + vv.id.to_s}
                    %div{:class => "identifier_holder_status_" + vv.status }
                      = image_tag('status_icons.png')
                    %div{:class=> "identifier_title"}
                      = vv.title.strip
                    - if offset_class == "" && v.length > 1
                      %div{:class => "expand_identifers", :onclick => "showOffsets(this)" }
                        = "+"
                  - offset_class = " offset "
                    
            - identifiers_to_show.each do |is|
              %div{:class => "identifier_holder " + is}
            
            -# publication.identifiers.each do |identifier|
              %div{:class => "identifier status_" + identifier.status +  " controlled_" + (board.controls_identifier?(identifier)  ? 'yes' : 'no') + " needs_review_" + "no" , :id => "identifier_" + identifier.id.to_s}
                = identifier.class::FRIENDLY_NAME
            
