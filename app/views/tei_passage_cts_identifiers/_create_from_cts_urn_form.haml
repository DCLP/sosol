:javascript

  function get_next_level(a_selected,a_type) {
    parts = a_selected.value.split('|')
    level = parseInt(parts[0]);
    urn = parts[1];
    get_passage_urns(urn,level+1,a_type);
  }
  function get_passage_urns(a_urn,a_level,a_type)
  {
      prefix = "#{url_for(:controller => 'cts_proxy', :only_path => true)}"
      var request_url = prefix + '/validreffs?inventory=perseussosol&urn=' + a_urn + 
      '&level=' + a_level;
      new Ajax.Request(request_url, {
        method: 'get',
        dataType: 'text',
        onSuccess: function(response) {
          populate_selector(response.responseText.split(','),a_level,a_type);
        }
     });
  }
  
  function sort_by_cite(a,b) {
    var a_parts = a.split(':');
    var b_parts = b.split(':');
    return a_parts[a_parts.length-1] - b_parts[b_parts.length-1];
  }
  
  function populate_selector(options,a_level,a_type) {
    var select_element =  $(a_type + '_passage_select_' + a_level);
    var last_element = $(a_type + '_passage_select_' + (a_level-1));
    // TODO the check on options length should really be 0 but the xslt is added an extra
    // end separator which is bringing in an empty element
    if ( select_element == null  && 
         last_element != null && options.length > 1)
    {
      var insert = '<select onchange="get_next_level(this,\'' + a_type + '\');" name="' + 
        a_type + '_passage_select_'+ a_level + '" id="' + 
        a_type + '_passage_select_' + a_level +'"></select>';
      new Insertion.After(last_element,insert);
      select_element =  $(a_type + '_passage_select_' + a_level);
      $(a_type + '_passage_level').value = a_level;
    }
    select_element.childElements().each(Element.remove);
    for (var i=0; i<options.length; i++)
    {
      if (options[i]){
        var display = options[i].split(':');
        var levels = display[display.length-1].split('.');
        select_element.insert("<option value='" + a_level + "|" + options[i] + "'>" + levels[levels.length-1] + "</option>");
      } 
    }
     select_element.insert("<option value=''>click to select...</option>");
  }
  document.observe("dom:loaded", function() {
    get_passage_urns($F('publication_urn'),1,'start');
    get_passage_urns($F('publication_urn'),1,'end');
  });

- form_for :tei_passage_cts_identifer, Identifier.new, :url => { :controller => "tei_passage_cts_identifiers", :action => "create" } do |form|
  = hidden_field_tag 'publication_urn', Publication.find(params[:publication_id]).identifiers.select{|i| i.class == TeiCTSIdentifier}.last.urn_attribute
  = hidden_field_tag 'start_passage_level', '1'
  = hidden_field_tag 'end_passage_level', '1'
  = label_tag 'Select a starting passage:'
  = select_tag 'start_passage_select_1', nil, :disabled => false, :style => 'min-width: 5em;', :onchange => "get_next_level(this,'start');"
  %br
  = label_tag 'Select an ending passage:'
  = select_tag 'end_passage_select_1', nil, :disabled => false, :style => 'min-width: 5em;', :onchange => "get_next_level(this,'end');"
  
  %br
  = form.submit "Retrieve", :class => ''
