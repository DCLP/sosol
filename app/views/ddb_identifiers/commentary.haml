:javascript
  document.observe("dom:loaded", function() {
    $$('.commentary#edition li').invoke('observe','click',addCommentary);
    $$('.commentary#edition li').each(loadExistingCommentary);
  });
  
  function loadExistingCommentary(commentary_li) {
    existing_comments = $$(".comment-on-" + commentary_li.id);
    existing_comments.reverse().each(function (comment) {
      comment.addClassName('clickable');
      comment.addClassName('existing_comment');
      comment.observe('click',transformExistingCommentary);
      commentary_li.removeClassName('clickable');
      commentary_li.stopObserving('click');
      commentary_li.insert({
        after: comment
      });
    });
  }
  
  function transformExistingCommentary(event) {
    var comment_li = Event.element(event).up('li.input');  
    comment_div_container = comment_li.childElements().first();
    
    comment_div = comment_div_container.childElements().first();
    
    nval_node = comment_div.childElements().first();
    nval = nval_node.innerHTML;
    nval_node.remove();
    
    comment_on = comment_li.classNames().toArray().first().replace(/comment-on-/,'');
    content = comment_div.innerHTML.strip();
    
    Effect.SlideUp(comment_div_container.id, {duration: 0.5});
    
    $(comment_li).insert({
      after: '<li class="input existing_comment"/>' + generateCommentaryForm(comment_on,nval,content)
    });
    Effect.SlideDown("form-"+comment_on, { queue: 'end'});
    
  }
  
  function generateCommentaryForm(id,nval,content) {
    if(content === undefined) {content = "";}
    return '<div id="form-'+id+'" style="display:none;"><div class="form">' +
      '#{form_tag({:action => :update_commentary}, :method => :put).chomp()}' +
        '<input type="hidden" name="line_id" value="' + id + '"/>' +
        '<input type="hidden" name="original_content" value="' + content + '"/>' +
        '<label>Line(s): </label><input type="text" size="5" name="reference" value="'+nval+'"/>' +
        '<textarea rows="5" cols="20" name="content">'+content+'</textarea>' +
        '<input class="save" type="submit" value="Save"/> or <a href="" style="color:red">cancel</a>' +
      '</form></div></div>';
  }
  
  function addCommentary(event) {
    var element = Event.element(event);
    nval = $("n-" + element.id).childNodes(0).nodeValue;
    element.insert({
      after: '<li class="input"/>' + generateCommentaryForm(element.id,nval)
    });
    Effect.SlideDown("form-"+element.id);
    element.stopObserving('click');
    element.removeClassName('clickable');
  }

#main
  = render :partial => 'identifiers/edit_bar'
  
  .site
    = render :partial => 'identifiers/header'
    #edit
      - form_for @identifier, :url => { :action => :update }  do |f|
        = f.error_messages
        
        %label Commentary
        .PContent
          = @identifier[:html_preview]