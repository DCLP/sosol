:javascript
  var forceChangeTrue = false; //declared to make showmatch function work
  document.observe("dom:loaded", function() {
    $$('.commentary#edition li').invoke('observe','click',addCommentary);
    $$('.commentary#edition li').each(loadExistingCommentary);
    if ($('frontmatter_commentary_add')) //only one or the other will exist
      {
        $('frontmatter_commentary_add').observe('click',addFrontmatterCommentary);
      }
    else 
      {
        $('frontmatter_commentary').observe('click',transformExistingFrontmatterCommentary);
      }
    if (#{!@identifier.mutable?}) {removeAllClickable();}
  });
  
  function loadExistingCommentary(commentary_li) {
    existing_comments = $$(".comment-on-" + commentary_li.id);
    existing_comments.reverse().each(function (comment) {
      comment.addClassName('clickable');
      comment.addClassName('existing_comment');
      comment.observe('click',transformExistingCommentary);
      commentary_li.removeClassName('clickable');
      commentary_li.stopObserving('click');
      commentary_li.insert({
        after: comment
      });
    });
  }
  
  function removeAllClickable() {
    $$(".clickable").each(function (clickable) {
      clickable.stopObserving('click');
      clickable.removeClassName('clickable');
    });
  }
  
  function transformExistingCommentary(event) {
    removeAllClickable();
    //remove exisiting notification error if it there before loading the new form
    if ($('notice_notice')) 
      {
        $('notice_notice').remove();
      }
    
    var comment_li = Event.element(event).up('li.input');  
    
        //get the original xml fragment
    var originalxmls = $(comment_li).select('textarea.originalxml');
    var originalxml = "";
    if (originalxmls.length > 0)
    {
      //originalxml = originalxmls[0].innerHTML;
      originalxml = originalxmls[0].value;
    }
    
    comment_div_container = comment_li.childElements().first();
    
    comment_div = comment_div_container.childElements().first();
    
    nval_node = comment_div.childElements().first();
    nval = nval_node.innerHTML;
    nval_node.remove();
    
    comment_on = comment_li.classNames().toArray().first().replace(/comment-on-/,'');
    content = comment_div.innerHTML.strip();
    
    Effect.SlideUp(comment_div_container.id, {duration: 0.5});
    
    $(comment_li).insert({
      after: '<li class="input existing_comment"/>' + generateCommentaryForm(comment_on,nval,content,comment_div_container.id)
    });

    Effect.SlideDown("form-"+comment_on, { queue: 'end'});
    
    //translate the xml to commentary sugar
    getSugar(originalxml, 'LBL');
    
  }
  
  function generateDeleteForm(id,original_item_id) {
    if(original_item_id == '') {
      return '';
    }
    else {
    return '#{form_tag({:action => :delete_commentary}, :method => :delete, :id => "delete_form").chomp()}' +
        '<input type="hidden" name="line_id" value="' + id + '"/>' +
        '<input type="hidden" name="original_item_id" value="' + original_item_id + '"/>' +
        '<span style="float:right;position:relative;top:-1.5em">' +
          '<a href="#{url_for({:action => :delete_commentary})}" style="color:red" onclick="if (confirm(\'Are you sure you want to delete this commentary entry?\')) {$(\'delete_form\').submit();};return false;">delete</a>'
        '</span>' +
      '</form>';
    }
  }
  
  function generateDeleteFrontmatterForm(content) {
    if(content == '') {
      return '';
    }
    else {
      return '#{form_tag({:action => :delete_frontmatter_commentary}, :method => :delete, :id => "delete_frontmatter_form").chomp()}' +
          '<span style="float:right;position:relative;top:-1.5em">' +
            '<a href="#{url_for({:action => :delete_frontmatter_commentary})}" style="color:red" onclick="if (confirm(\'Are you sure you want to delete the front matter commentary?\')) {$(\'delete_frontmatter_form\').submit();};return false;">delete</a>'
          '</span>' +
        '</form>';
    }
  }
  
  function generateCommentaryForm(id,nval,content,original_item_id) {
    
    if(content === undefined) {content = "";}
    if(original_item_id === undefined) {original_item_id = "";}
    return '<div id="form-'+id+'" style="display:none;"><div class="form">' +
      '#{form_tag({:action => :update_commentary}, :method => :put, :id => "update_commentary_form").chomp()}' +
        '<input type="hidden" name="line_id" value="' + id + '"/>' +
        '<input type="hidden" name="original_item_id" value="' + original_item_id + '"/>' +
        '<label>Line(s): </label><input type="text" size="5" name="reference" value="'+nval+'"/>' +
        //show no content since it will be updated with getsugar call
        '<textarea rows="5" cols="20" name="content" id="com_sugar_content"></textarea>' +
        '<input class="save" type="button" id="save_com" value="Save" onclick ="validateComSugar()"/>' + 
        ' or <a href="" style="color:red">cancel</a>' +
        ' or <a  href="#" style="color:blue" onclick ="showMatch(\'com_sugar_content\', \'**POSSIBLE ERROR**\')">Find the Error</a>' +
      '</form>' +
      generateDeleteForm(id,original_item_id) +
      '</div></div>';
 
  }
  
  function generateFrontmatterCommentaryForm(content) {
    if(content === undefined) {content = "";}
    return '<div id="form-frontmatter" class="frontmatter_container" style="display:none;"><div class="form">' +
      '#{form_tag({:action => :update_frontmatter_commentary}, :method => :put, :id => "update_frontmatter_form").chomp()}' +
        '<label>Front matter:</label><br/>' +
        '<textarea rows="10" cols="20" name="content" id="fm_sugar_content" style="height: auto"></textarea>' +
        '<input class="save" type="button" id="save_fm" value="Save" onclick ="validateFMSugar()"/>' + 
        ' or <a href="" style="color:red">cancel</a>' +
        ' or <a  href="#" style="color:blue" onclick ="showMatch(\'fm_sugar_content\', \'**POSSIBLE ERROR**\')">Find the Error</a>' +
      '</form>' +
      generateDeleteFrontmatterForm(content) +
      '</div></div>';
  }
  
  function validateComSugar()
  {
    //disable form for ajax call to server
    Form.Element.disable('com_sugar_content');
    Form.Element.disable('save_com');
    $('com_sugar_content').toggleClassName('loading');

    originalleiden = $('com_sugar_content').value;
    //alert ("originalleiden" + originalleiden);
    if (#{(!defined?(XSUGAR_STANDALONE_USE_PROXY).nil?) && XSUGAR_STANDALONE_USE_PROXY}) {
      request_url = "#{url_for(:controller => 'ajax_proxy', :only_path => true)}" + '/xsugar/';
    }
    else {
      request_url = "#{defined?(XSUGAR_STANDALONE_URL) ? XSUGAR_STANDALONE_URL : ''}";
      request_url = "/" + request_url.split("/").slice(3).join("/");
    }
    
    wrapped_content = "<W" + originalleiden + "W>";
    new Ajax.Request(request_url, {
      method: 'post',
      parameters: $H({content: wrapped_content, type: 'commentary', direction: 'nonxml2xml'}),
      onSuccess: function(response) {
        json = response.responseText.evalJSON();
      
        if ("exception" in json) {
          if ($('flasherror')) //update if already there, add if not
          {
            $('flasherror').update('Error converting XML to Leiden+ approximately at line ' + json.exception.line + ' column ' + json.exception.column + '. Please correct the error <a href="' + '#{polymorphic_path([@identifier.publication, @identifier], :action => :editxml)}' + '">on the XML page</a>.');
          }
          else
          {
            $$('div#main > div.site').first().insert({
              top: new Element('div',{'id': 'flasherror'}).update('Error converting XML to Leiden+ approximately at line ' + json.exception.line + ' column ' + json.exception.column + '. Please correct the error <a href="' + '#{polymorphic_path([@identifier.publication, @identifier], :action => :editxml)}' + '">on the XML page</a>.')
            });
            $('flasherror').addClassName('flash error');
          }
          //add class after the original insert to get the flash highlighting to work in IE browser
         
          var error_content = ' ';
          error_content = insert_error_here(json.content, json.exception.line, json.exception.column);
          $('com_sugar_content').value = error_content.replace(/^\<W/,'').replace(/W\>$/,'').strip();
          
          //enable form after error
          $('com_sugar_content').toggleClassName('loading');
          Form.Element.enable('com_sugar_content');
          Form.Element.enable('save_com');

          //showMatch function in confirm.js included at the bottom
          showMatch("com_sugar_content", "**POSSIBLE ERROR**");
          // **POSSIBLE ERROR** defined in insert_error_here function below
        }
        else 
        {
          //temporarily enable so can set the are to the XML value for the form submit to pick up
          $('com_sugar_content').toggleClassName('loading');
          Form.Element.enable('com_sugar_content');

          //remove wrap tags and namespace before call action to save to XML
          $('com_sugar_content').value = json.content.replace(/^\<wrap(.*?)\>/,'').replace(/\<\/wrap\>$/,'').strip();

          $('update_commentary_form').submit();
          
          //disable form again while server processes the new XML - will automatically reset on return from server
          $('com_sugar_content').toggleClassName('loading');
          Form.Element.disable('com_sugar_content');
          Form.Element.disable('save_com');
        }
      },
      onFailure: function(response) {
        // reload after 10 seconds if we failed, should ONLY be used if JCS cache is working
        setTimeout("validateComSugar(" + wrapped_content + ")",10000);
      }
    });
  }

  function validateFMSugar()
  {
    //disable form for ajax call to server
    Form.Element.disable('fm_sugar_content');
    Form.Element.disable('save_fm');
    $('fm_sugar_content').toggleClassName('loading');

    originalleiden = $('fm_sugar_content').value;
    //alert ("originalleiden" + originalleiden);
    if (#{(!defined?(XSUGAR_STANDALONE_USE_PROXY).nil?) && XSUGAR_STANDALONE_USE_PROXY}) {
      request_url = "#{url_for(:controller => 'ajax_proxy', :only_path => true)}" + '/xsugar/';
    }
    else {
      request_url = "#{defined?(XSUGAR_STANDALONE_URL) ? XSUGAR_STANDALONE_URL : ''}";
      request_url = "/" + request_url.split("/").slice(3).join("/");
    }
    
    wrapped_content = "<W" + originalleiden + "W>";
    new Ajax.Request(request_url, {
      method: 'post',
      parameters: $H({content: wrapped_content, type: 'commentary', direction: 'nonxml2xml'}),
      onSuccess: function(response) {
        json = response.responseText.evalJSON();
      
        if ("exception" in json) {
          if ($('flasherror')) //update if already there, add if not
          {
            $('flasherror').update('Error converting XML to Leiden+ approximately at line ' + json.exception.line + ' column ' + json.exception.column + '. Please correct the error <a href="' + '#{polymorphic_path([@identifier.publication, @identifier], :action => :editxml)}' + '">on the XML page</a>.');
          }
          else
          {
            $$('div#main > div.site').first().insert({
              top: new Element('div',{'id': 'flasherror'}).update('Error converting XML to Leiden+ approximately at line ' + json.exception.line + ' column ' + json.exception.column + '. Please correct the error <a href="' + '#{polymorphic_path([@identifier.publication, @identifier], :action => :editxml)}' + '">on the XML page</a>.')
            });
            $('flasherror').addClassName('flash error');
          }
          //add class after the original insert to get the flash highlighting to work in IE browser
         
          var error_content = ' ';
          error_content = insert_error_here(json.content, json.exception.line, json.exception.column);
          $('fm_sugar_content').value = error_content.replace(/^\<W/,'').replace(/W\>$/,'').strip();
          
          //enable form after error
          $('fm_sugar_content').toggleClassName('loading');
          Form.Element.enable('fm_sugar_content');
          Form.Element.enable('save_fm');

          //showMatch function in confirm.js included at the bottom
          showMatch("fm_sugar_content", "**POSSIBLE ERROR**");
          // **POSSIBLE ERROR** defined in insert_error_here function below
        }
        else 
        {
          //temporarily enable so can set the are to the XML value for the form submit to pick up
          $('fm_sugar_content').toggleClassName('loading');
          Form.Element.enable('fm_sugar_content');

          //remove wrap tags and namespace before call action to save to XML
          $('fm_sugar_content').value = json.content.replace(/^\<wrap(.*?)\>/,'').replace(/\<\/wrap\>$/,'').strip();

          $('update_frontmatter_form').submit();
          
          //disable form again while server processes the new XML - will automatically reset on return from server
          $('fm_sugar_content').toggleClassName('loading');
          Form.Element.disable('fm_sugar_content');
          Form.Element.disable('save_fm');
        }
      },
      onFailure: function(response) {
        // reload after 10 seconds if we failed, should ONLY be used if JCS cache is working
        setTimeout("validateFMSugar(" + wrapped_content + ")",10000);
      }
    });
  }
  
  function getSugar(originalxml, wherefrom)
  {
    //remove  namespaces that break sugar
    var xmlnsPattern = new RegExp(" xmlns[^\"]*\"[^\"]*\"", "gi");
    originalxml = originalxml.replace(xmlnsPattern, "");
    
    //create url call
    if (#{(!defined?(XSUGAR_STANDALONE_USE_PROXY).nil?) && XSUGAR_STANDALONE_USE_PROXY}) {
      request_url = "#{url_for(:controller => 'ajax_proxy', :only_path => true)}" + '/xsugar/';
    }
    else {
      request_url = "#{defined?(XSUGAR_STANDALONE_URL) ? XSUGAR_STANDALONE_URL : ''}";
      request_url = "/" + request_url.split("/").slice(3).join("/");
    }
    
    wrapped_content = "<wrap>" + originalxml + "</wrap>";
    
    new Ajax.Request(request_url, {
      method: 'post',
      parameters: $H({content: wrapped_content, type: 'commentary', direction: 'xml2nonxml'}),
      onSuccess: function(response) {
        json = response.responseText.evalJSON();
      
        if ("exception" in json) {
          $$('div#main > div.site').first().insert({
            top: new Element('div',{'class': 'flash error'}).update('Error converting XML to Leiden+. Please correct the error <a href="' + '#{polymorphic_path([@identifier.publication, @identifier], :action => :editxml)}' + '">on the XML page</a>.')
          });
        }
        else {
          if (wherefrom == "FM")
            {
              $('fm_sugar_content').value = json.content.replace(/^\<W/,'').replace(/W\>$/,'').strip();
            }
          else
            {
              $('com_sugar_content').value = json.content.replace(/^\<W/,'').replace(/W\>$/,'').strip();
            }
        }
      },
      onFailure: function(response) {
        // reload after 10 seconds if we failed, should ONLY be used if JCS cache is working
        setTimeout("getSugar(" + originalxml + ")",10000);
      }
    });
  }
  
  function addCommentary(event) {
    removeAllClickable();
    //remove exisiting notification error if it there before loading the new form
    if ($('notice_notice')) 
      {
        $('notice_notice').remove();
      }
  
    var element = Event.element(event)
    if (!element.hasClassName('line')) {element = element.up('li.line');}
    nval = $("n-" + element.id).innerHTML;
    element.insert({
      after: '<li class="input"/>' + generateCommentaryForm(element.id,nval)
    });
    Effect.SlideDown("form-"+element.id);
    element.stopObserving('click');
    element.removeClassName('clickable');
  }

  function addFrontmatterCommentary(event) {
    removeAllClickable();
    //remove exisiting notification error if it there before loading the new form
    if ($('notice_notice')) 
      {
        $('notice_notice').remove();
      }
    
    var element = Event.element(event);
    
    var original_content = $$('#frontmatter_commentary_container textarea');
    if(original_content.size() == 0) {
      original_content = '';
    }
    else {
      original_content = original_content[0].value;
    }

    Effect.SlideUp("frontmatter_commentary_container",{queue: 'front', duration: 0.5});
    
    $("frontmatter_commentary_container").insert({
      after: generateFrontmatterCommentaryForm(original_content)
    });
        
    Effect.SlideDown("form-frontmatter",{queue: 'end'});
    
    element.stopObserving('click');
    event.stop();
  }
  
  function transformExistingFrontmatterCommentary(event) {
    removeAllClickable();
    //remove exisiting notification error if it there before loading the new form
    if ($('notice_notice')) 
      {
        $('notice_notice').remove();
      }
    var original_content = $$('#frontmatter_commentary_container textarea');
    if(original_content.size() == 0) {
      original_content = '';
    }
    else {
      original_content = original_content[0].value;
    }
    
    Effect.SlideUp("frontmatter_commentary_container",{queue: 'front', duration: 0.5});
    
    $("frontmatter_commentary_container").insert({
      after: generateFrontmatterCommentaryForm(original_content)
    });
        
    Effect.SlideDown("form-frontmatter",{queue: 'end'});

    //translate the xml to commentary sugar
    getSugar(original_content, 'FM');
  }
  
  function insert_error_here(content, line, column){
      //copied this function/logic from identifiers_controller.rb
      // this routine is to place the error message below in the Leiden+ or XML returned when a parse error
      // occurs by taking the line and column from the message and giving the user the place in the content
      // the parse error occured in xsugars processing - may or may not be where the real error is depending
      // on what the error is - this processing is by character because there are multiple byte characters
      // possible in the text and a way to place msg with taking that into account
      //
      // line starts at 1 because first character is on first line before incrementing in loop
      // same logic for column, already on first character before incrementing in loop 
      // 'col' check has to come before 'new line' check in case error is on last char in the line
      var line_cnt = 1;
      var col_cnt = 1;
      var content_error_here = new Array();
      
      for (i=0;i<=content.length;i++){

        if (line_cnt == line){
          if (col_cnt == column) {
            content_error_here.push("**POSSIBLE ERROR**");
          }
          col_cnt++;
        }
        
        if (content.charAt(i) == "\n"){
          line_cnt++;
        }
        content_error_here.push(content.charAt(i));
      }

      return content_error_here.join("");
  }

#main
  = render :partial => 'identifiers/edit_bar'
  
  .site
    = render :partial => 'identifiers/header'
    #edit
        
      %label Commentary
      .PContent
        :preserve
          #{@identifier[:html_preview]}

= javascript_include_tag 'confirm'