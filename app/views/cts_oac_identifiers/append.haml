:javascript
  
  var subref_start;
  var subref_end;
  var target_num = 1;
  var current_target;
  var all_targets = $H()
  
  function get_target_passage() {
    var request_url = "/cts/getpassage/" +
      "#{@identifier.parentIdentifier.id}/" + $F('target_urn')
    new Ajax.Request(request_url, {
      method: 'get',
      dataType: 'text/html',
      onSuccess: function(response) {
        set_target_content(response.responseText);
      }
    }); 
  }
  
  function add_target() {
    next_target = ++target_num;
    input_name = 'target_uri' + next_target;
   $('targets').insert('<br/>' +
      '<input class="target_uri" type="text" id="' + input_name + '" name="' + input_name + '">' + 
      '<button id="remove_' + input_name + '">Remove</button>');
    current_target = $(input_name);
    $(input_name).observe('click', select_target_input);
    $('remove_' + input_name).observe('click', remove_target_input);
    return false;
  }
  
  function remove_target_input(a_e) {
    to_remove = a_e.element();
    target_input = $(to_remove).previous();
    target_name = target_input.name;
    $(target_input).remove();
    $(to_remove).remove();
    toggle_highlight(false,['selected','highlighted'],[target_name]);
    all_targets.unset(target_name);
    return false;
  }
  
  function select_target_input(a_e) {
    last_target = current_target;
    current_target = a_e.element();
    toggle_highlight(false,['selected'],[last_target.name]);
    toggle_highlight(true,['selected'],[current_target.name])
  }
  
  function start_target(a_e) {
    if (!a_e) {
      a_e = window.event;
    }
    var rp = a_e.rangeParent;
    if ($(rp.parentElement).hasClassName('punc')) {
      subref_start = $(rp.parentElement).next();
    } else {
      subref_start = rp.parentElement
    }
    
    toggle_highlight(false,['highlighted','selected']);
  }
  
  function end_target(a_e) {
    if (!a_e) {
      a_e = window.event;
    }
    var rp = a_e.rangeParent;
    if ($(rp.parentElement).hasClassName('punc')) {
      subref_end = $(rp.parentElement).previous();
    } else {
      subref_end = rp.parentElement
    }
    var uri = $('src').value + "/" + $('target_urn').value + "#" + subref_start.readAttribute('data-ref') + '-' + subref_end.readAttribute('data-ref');
    current_target.value = uri;
    all_targets.set(current_target.name,[subref_start,subref_end]);
    toggle_highlight(true,['highlighted']);
    toggle_highlight(true,['selected'],[current_target.name]);
  }
  
  
  function toggle_highlight(a_on,a_classes,a_targets) {  
    if (a_targets == null) {
      targets = all_targets.keys();
    } else { 
      targets = a_targets;
    }
    targets.each(
      function(name) { 
        var set = all_targets.get(name);
        if (set && set != null) {
          a_classes.each(
            function(a_class) {
              if (a_on) {
                $(set[0]).addClassName(a_class);
              } else {
                $(set[0]).removeClassName(a_class);
              }
              
            }
          );
          var sibs = $(set[0]).nextSiblings();
          var done = false;
          if (set[0] != set[1]) {
            for (var i=0; i<sibs.length; i++) {
              if (done) {
                break;
              }
              a_classes.each(
                function(a_class) {
                  if (a_on) {
                    $(sibs[i]).addClassName(a_class);
                  } else {
                    $(sibs[i]).removeClassName(a_class);
                  }
                  if (sibs[i] == set[1]) {
                    done = true;
                  }
                }
              ); // end class iterator
            }  // end loop through siblings
          } // end test on set length
        } // end test on set definition
      } // end iterator on each target
    );
  }
  
  function set_target_content(a_html) {
    var target = $('target_content');
    $('target_content').innerHTML = a_html;
  }
  
  function check_input() {
    var all_targets = $$('.target_uri');
    var valid_targets = $$('.target_uri').detect(function(elem) { return elem.value.match(/^https?:/) != null});
    var invalid_targets = $$('.target_uri').detect(function(elem) { return elem.value.match(/^https?:/) == null});
    var valid_body = ( $('body_uri').value.match(/^https?:/) != null);
    var messages = [];
    if (! valid_targets || valid_targets.length == 0) {
      messages.push("You need to specify at least one valid uri as an annotation target.");
    }
    if (invalid_targets && invalid_targets.length > 0) {
      messages.push("You have one more more invalid annotation target uris specified.");
    }
    if (! valid_body) {
      messages.push("You need to specify a valid uri as the annotation body.");
    }
    if (messages.length > 0) {
      alert(messages.join("\n"));
      return false;
    } else {
      if (Array.isArray(valid_targets)) {
        $('valid_targets').value = $(valid_targets).collect(function(elem) { return elem.name; }).join(',');
      }
      else
      {
        $('valid_targets').value = valid_targets.name;
      }
      return true;
    }
  }
    
  document.observe("dom:loaded", function() {    
    get_target_passage();
    $('target_uri1').observe('click', select_target_input);
    $('remove_target_uri1').observe('click', remove_target_input);
    current_target = $('target_uri1');
  });

.append
  %h3 Add Annotation
  %p
  - form_for @identifier, :url => { :action => "append", :controller => "cts_oac_identifiers"}, :html => {:onsubmit => 'return check_input();'} do |form|
    = hidden_field_tag 'publication_id',@publication.id
    = hidden_field_tag 'id',@identifier.id
    = hidden_field_tag 'collection',params[:collection]
    = hidden_field_tag 'src',params[:src]
    = hidden_field_tag 'target_urn', params[:target_urn]
    = hidden_field_tag 'valid_targets',nil
    = label_tag 'Citation Text:'
    .target{:id => 'target_content',:onmousedown => 'start_target(event);', :onmouseup => 'end_target(event)' }
      .loading Loading...
    %fieldset{:id => 'annotation_fields'}
      .hints 
        Select from the text with your mouse to identifier a subreference within the citation as the Annotation Target. This will automatically update the Target URI with the selected subreference. 
        Press the 'Add' button to add more Target subreferences to this annotation. 
      .targets{:id => 'targets'}
        = label_tag 'Annotation Target URIs:'
        %br
        = text_field_tag 'target_uri1', "#{params[:src]}/#{params[:target_urn]}", { :class => 'target_uri'}
        %button{:id => 'remove_target_uri1'}Remove
      .add_target
        = label_tag '(to select another target from this citation)'
        %button{:onclick => 'return add_target();'}Add
      = select_tag("annotation_title", options_for_select(['isCitationOf','isInstanceOfPlace','isInstanceOfPerson']))
      %br
      = label_tag 'URI:'
      = text_field_tag 'body_uri', nil, { :class => 'body_uri'}
    = button_to "Submit"
  